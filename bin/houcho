#!/usr/bin/env ruby
# -*- encoding: utf-8 -*-
$LOAD_PATH.unshift File.join(File.dirname(__FILE__), *%w[.. lib])

require 'rubygems'
require 'thor'
require 'houcho'

include Houcho

class Thor::MyHelper < Thor
  class_option :help, :type => :boolean, :aliases => '-h', :desc => 'Help message.'

  no_tasks do
    def invoke_task(task, *args)
      if options[:help] && task.name != 'help'
        self.class.task_help(shell, task.name)
      else
        super
      end
    end
  end

  def self.banner(task, namespace = false, subcommand = true)
    super
  end
end


class SpecConduct < Thor::MyHelper
  namespace :spec

  desc 'details [spec]', 'show details about a spec'
  def details(spec)
    show_spec_details(spec)
  end

  desc 'show', 'show all of specs'
  def show
    puts Spec.elements.sort.join("\n")
  end

  desc 'attach [spec] [role]', 'attach a spec to a role'
  def attach(spec, role)
    attach_spec_to_role(spec, role)
  end

  desc 'detach [spec] [role]', 'detach a spec from a role'
  def detach(spec, role)
    detach_spec_from_role(spec, role)
  end

  desc 'check [options]', '指定specを、関連付けられているhostを適当に選んで実行させる'
  option :sample_host_count, :type => :numeric, :default => 5, :desc => 'サンプルホスト数'
  def check(*args)
    if args.empty?
      self.class.task_help(shell, __method__)
      exit
    end
    check_specs(options[:sample_host_count], args)
  end

  desc 'exec [options]', 'run serverspec'
  option :hosts,   :type => :array,   :desc => 'hosts that run specs (required: --specs)'
  option :specs,   :type => :array,   :desc => 'run specs (requied: --hosts)'
  option :roles,   :type => :array,   :desc => 'runspecs by role'
  option :ukigumo, :type => :boolean, :desc => 'post results to UkigumoServer'
  option :ikachan, :type => :boolean, :desc => 'post fail results to Ikachan'
  option :dry_run, :type => :boolean, :desc => 'show commands that may exexute'
  def exec
    hosts, specs, roles =
      (options[:hosts]||[]), (options[:specs]||[]), (options[:roles]||[])

    if (hosts + specs + roles).empty? || (hosts.empty? && ! specs.empty?) || (! hosts.empty? && specs.empty?)
      self.class.task_help(shell, __method__)
      exit
    end

    runspec_prepare(
      roles, hosts, specs,
      {
        ukigumo: options[:ukigumo],
        ikachan: options[:ikachan],
      },
      options[:dry_run],
    )
  end
end


class HostConduct < Thor::MyHelper
  namespace :host

  desc 'details [host]', 'show details about a host'
  def details(host)
    show_host_details(host)
  end

  desc 'show', 'show all of hosts'
  def show
    show_all_hosts
  end

  desc 'attach [host] [role]', 'attach a host to a role'
  def attach(host, role)
    attach_host_to_role(host, role)
  end

  desc 'detach [host] [role]', 'detach a host from a role'
  def detach(host, role)
    detach_host_from_role(host, role)
  end

  desc "ignore [host]", "add host to ignore list"
  def ignore(host)
    ignore_host(host)
  end

  desc "disignore [host]", "delete host from ignore list"
  def disignore(host)
    disignore_host(host)
  end
end


class RoleConduct < Thor::MyHelper
  namespace :role

  desc 'create [role]', 'cretate a role'
  def create(*args)
    Role.create(args)
  end

  desc 'delete [role]', 'delete a role'
  def delete(*args)
    Role.delete(args)
  end

  desc 'rename [exist role] [name]', 'rename a role'
  def rename(role, rename)
    Role.rename(role, rename)
  end

  desc 'details [role]', 'show details about a role'
  def details(role)
    puts_details(Role.details(role))
  end

  desc 'show', 'show all of roles'
  def show
    puts Role.all.join("\n")
  end
end


class CFConduct < Thor::MyHelper
  namespace :cfrole

  desc "details [cfrole]", "show details about a cf's role"
  def details(cf_role)
    show_cf_role_details(cf_role)
  end

  desc 'show', "show all of cf's roles"
  def show
    show_all_cf_roles
  end

  desc 'attach [cfrole] [role]', 'attach a cf role to a role'
  def attach(cf_role, role)
    attach_cfrole_to_role(cf_role, role)
  end

  desc 'detach [cfrole] [role]', 'detach a cf role from a role'
  def detach(cf_role, role)
    detach_cfrole_from_role(cf_role, role)
  end

  desc 'configure', '(re)loading yamls of cloudforecast'
  def configure
    configure_houcho
  end

end


class Main < Thor
  register(CFConduct, 'cfrole', 'cfrole [attach|detach|show|details|configure]', 'cloudforecastをのyamlから情報を読み込んで操作します')
  register(RoleConduct, 'role', 'role [create|delete|rename|details|show]', 'roleを追加したり情報を表示したり')
  register(HostConduct, 'host', 'host [attach|detach|show|details|ignore|disignore]', 'hostを追加したり情報を表示したり')
  register(SpecConduct, 'spec', 'spec [attach|detach|show|details|exec|check]', 'specを追加したり情報を表示したり')

  class_option :help, :type => :boolean, :aliases => '-h', :desc => 'Help message.'
  no_tasks do
    def invoke_task(task, *args)
      if options[:help] && ! %w{role host spec exec cf help}.include?(task.name)
        Houcho.task_help(shell, task.name)
      else
        super
      end
    end
  end

  desc 'init', 'set houcho repository on current directory'
  def init
    initialize_houcho
  end

end

Main.start
exit! if $fail_runspec
